./Accordion.tsx:2:import React, { useState } from 'react';
./ActionIconButton.tsx:1:import React from 'react';
./ActionIconButton.tsx:2:import { soundManager } from 'services../soundManager';
./ActionIcons.tsx:2:import React from 'react';
./ActionResultToast.tsx:1:import React, { useEffect } from 'react';
./ActionResultToast.tsx:2:import { ActionRollResult } from './types';
./App.tsx:3:import React, { useEffect } from 'react';
./App.tsx:4:import Header from './components/Header';
./App.tsx:5:import ToastContainer from './components/shared/ToastContainer';
./App.tsx:6:import { useAppSelector, useAppDispatch } from './hooks';
./App.tsx:7:import { changeAppMode, initializeApp } from './appSlice';
./App.tsx:8:import AppRouter from './components/routing/AppRouter';
./BuildPanel.tsx:1:import React, { useState, useEffect, useMemo } from 'react';
./BuildPanel.tsx:2:import { VTTObject, VTTTool, TerrainCell, StaticGameDataCache, ObjectBlueprint } from './types';
./CharacterProfile.tsx:1:import React, { useState } from 'react';
./CharacterProfile.tsx:2:import { Character } from './types';
./CharacterProfile.tsx:3:import { suggestCharacterNames, generateAvatar } from 'services../ai/character.service';
./CharacterProfile.tsx:4:import { useToast } from 'state/ToastContext';
./CharacterProfile.tsx:5:import { GeminiError } from 'services../geminiService';
./CharacterProfile.tsx:6:import { useCharacterActions } from '../hooks/useCharacterActions';
./ClassIconFactory.tsx:1:import React from 'react';
./ClassIconFactory.tsx:16:} from './ClassIcons';
./ClassIcons.tsx:2:import React from 'react';
./ConceptDisplay.tsx:2:import React from 'react';
./ConceptDisplay.tsx:3:import { EncounterConcept } from './types';
./ConceptDisplay.tsx:4:import { useEncounterGeneration } from '../hooks/useEncounterGeneration';
./ConditionsPanel.tsx:1:import React, { useState, useEffect } from 'react';
./ConditionsPanel.tsx:2:import { ActionItem, ActionCategory } from './types';
./ConditionsPanel.tsx:3:import { dataService } from 'services./data.service';
./CurrencyManager.tsx:1:import React, { useState } from 'react';
./CurrencyManager.tsx:2:import { Currency } from './types';
./CurrencyManager.tsx:3:import { currencyToCopper, copperToCurrency } from '../../utils/currency';
./DialogueModal.tsx:1:import React, { useState, useRef, useEffect } from 'react';
./DialogueModal.tsx:2:import { Conversation, DialogueTurn } from './types';
./GenesisSummaryView.tsx:1:import React from 'react';
./GenesisSummaryView.tsx:2:import { Character, Ability, PartialCharacter } from './types';
./GenesisSummaryView.tsx:3:import { ABILITIES } from '../../constants';
./MapView.tsx:1:import React from 'react';
./MapView.tsx:2:import { VTTMap } from './types';
./Modal.tsx:1:import React, { useEffect } from 'react';
./Modal.tsx:2:import { soundManager } from 'services../soundManager';
./MonsterStatBlock.tsx:1:import React from 'react';
./MonsterStatBlock.tsx:2:import { Monster, MonsterAbilityScores, ActionItem, SpecialTrait, LegendaryAction, LairAction } from './types';
./MonsterStatBlockCard.tsx:1:import React from 'react';
./MonsterStatBlockCard.tsx:2:import { Monster } from './types';
./MonsterTypeIconFactory.tsx:2:import React from 'react';
./MonsterTypeIconFactory.tsx:18:} from './MonsterTypeIcons';
./MonsterTypeIcons.tsx:2:import React from 'react';
./RollResultToast.tsx:1:import React, { useEffect } from 'react';
./SidebarSection.tsx:1:import React, { useState } from 'react';
./SpellCard.tsx:1:import React from 'react';
./SpellCard.tsx:2:import { Spell } from './types';
./SpellDetailModal.tsx:1:import React from 'react';
./SpellDetailModal.tsx:2:import { Spell } from './types';
./SpellTargetingUI.tsx:1:import React from 'react';
./SpellTargetingUI.tsx:2:import { Spell } from './types';
./StepHeader.tsx:1:import React from 'react';
./StepNavigator.tsx:2:import React from 'react';
./SummoningChoiceModal.tsx:1:import React, { useState, useMemo, useEffect } from 'react';
./SummoningChoiceModal.tsx:2:import { Character, SummonChoicePrompt, Monster } from './types';
./SummoningChoiceModal.tsx:3:import { dataService, MonsterIndexEntry } from 'services./data.service';
./SummoningChoiceModal.tsx:4:import Modal from '../shared/Modal';
./SummoningModal.tsx:1:import React, { useState, useMemo, useEffect } from 'react';
./SummoningModal.tsx:2:import { Character, Movement, CompanionBlueprint, Spell } from './types';
./SummoningModal.tsx:3:import { dataService } from 'services./data.service';
./SummoningModal.tsx:4:import Modal from '../shared/Modal';
./TabButton.tsx:1:import React from 'react';
./ToastContainer.tsx:1:import React, { useEffect } from 'react';
./ToastContainer.tsx:2:import { useToast, ToastType } from './ToastContext';
./ToastContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useCallback } from 'react';
./VTTRenderer.ts:1:import * as THREE from 'three';
./VTTRenderer.ts:2:import { CSS2DRenderer, CSS2DObject } from 'three/addons/renderers/CSS2DRenderer.js';
./VTTRenderer.ts:3:import { VTTMap, Token, VTTObject, TerrainCell, VFXRequest, NpcAnimationState, StaticGameDataCache, ObjectBlueprint, MapNpcInstance, Viewport, EncounterConcept, SpellTargetingState } from './types';
./VTTRenderer.ts:4:import { assetManager } from 'services../assetManager';
./VTTRenderer.ts:5:import { generateTerrainMesh } from '../utils/terrain';
./VTTRenderer.ts:6:import { vfxManager } from './vfx';
./VTTToolbar.tsx:1:import React from 'react';
./VTTToolbar.tsx:2:import { VTTTool, Viewport } from './types';
./abilitiesSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./abilitiesSlice.ts:2:import { AbilitiesState, Ability, AbilityScores } from './types';
./aiDecision.service.ts:1:import { BattlefieldState, Monster, AiTurnIntent, NpcTurnResult } from './types';
./aiDecision.service.ts:2:import { generateNpcTurn } from './dm.service';
./aiDecision.service.ts:3:import { getLocalAiTurn } from 'engine../ai/localAiService';
./aiSlice.ts:1:import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
./aiSlice.ts:2:import { ActionItem, AiTurnIntent, Monster, GameEvent } from './types';
./aiSlice.ts:3:import { RootState } from './store';
./aiSlice.ts:4:import { aiDecisionService } from 'services../ai/aiDecision.service';
./aiSlice.ts:5:import { generateNpcTurn } from 'services../ai/dm.service';
./aiSlice.ts:6:import { logEvent } from './logSlice';
./aiSlice.ts:7:import { postGameEvent } from './eventSlice';
./aiSlice.ts:8:import { animationActions } from './animationSlice';
./aiSlice.ts:9:import { buildSpatialIndex } from '../utils/map';
./aiSlice.ts:10:import { advanceTurn } from './combatFlowSlice';
./animationSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./animationSlice.ts:2:import { NpcAnimationState, VFXRequest } from './types';
./aoe.ts:1:import * as THREE from 'three';
./aoe.ts:2:import { SpellTemplate, Token } from './types';
./appSlice.ts:1:import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
./appSlice.ts:2:import { AppState, AppMode, Character, StaticGameDataCache, ObjectBlueprint, CharacterState, GenesisState, PartialCharacter, GenerationStep } from './types';
./appSlice.ts:3:import { dataService } from 'services./data.service';
./appSlice.ts:4:import { RootState } from './store';
./appSlice.ts:5:import { entitySlice } from './entitySlice';
./appSlice.ts:6:import { saveActiveCharacter, setActiveCharacterId as setActiveCharIdInRoster } from './rosterSlice';
./assetManager.ts:1:import * as THREE from 'three';
./assetManager.ts:2:import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
./assetManager.ts:3:import { ObjectBlueprint } from './types';
./attack.command.ts:1:import { GameCommand, CommandResult, ValidationResult, CommandContext } from './types';
./attack.command.ts:2:import { SimulationState, DeclareAttackEvent, GameEvent, DealDamageEvent, Monster, Character } from './types';
./attack.command.ts:3:import { rollD20 } from '../../utils/dice';
./attack.command.ts:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./attack.command.ts:5:import { toCharacterState } from 'state/characterUtils';
./attack.command.ts:6:import { selectCharacter } from '..';
./behaviorTree.ts:1:import { AIBlackboard, BTNode, BTNodeStatus, NodeMetadata, ParallelPolicy } from './types';
./builderSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./builderSlice.ts:2:import { BuilderState } from './types';
./character.service.ts:1:import { Character, BackstoryDetails, Species, Trait, Ability, AbilityScoreIncreaseEffect, StaticGameDataCache, CharacterConcept, GenerationProgress } from './types';
./character.service.ts:3:import { generateAvatarImage } from './imagen.service';
./character.ts:1:import { Feat, Background, ClassFeature, DndClass, Item, Monster, Species, Spell, Trait, SummonChoiceEffect, Invocation, EncounterStrategy } from './data';
./character.ts:2:import { FeatEffect, EffectInstance } from './effects';
./character.ts:3:import { Ability, Currency, EffectDuration, EncumbranceStatus, InnateSpellFrequency, MonsterType, Movement, WildShapeEquipmentOption, DamagePart, ActionItem, GameEventType, PlayerChoiceType } from './primitives';
./characterActions.ts:2:import { metaActions } from './metaSlice';
./characterActions.ts:3:import { abilitiesActions } from './abilitiesSlice';
./characterActions.ts:4:import { proficienciesActions } from './proficienciesSlice';
./characterActions.ts:5:import { inventoryActions } from './inventorySlice';
./characterActions.ts:6:import { spellsActions } from './spellsSlice';
./characterActions.ts:7:import { vitalsActions } from './vitalsSlice';
./characterActions.ts:8:import { playStateActions } from './playStateSlice';
./characterReducer.ts:1:import { combineReducers } from '@reduxjs/toolkit';
./characterReducer.ts:4:import metaSlice from './metaSlice';
./characterReducer.ts:5:import abilitiesSlice from './abilitiesSlice';
./characterReducer.ts:6:import proficienciesSlice from './proficienciesSlice';
./characterReducer.ts:7:import inventorySlice from './inventorySlice';
./characterReducer.ts:8:import spellsSlice from './spellsSlice';
./characterReducer.ts:9:import vitalsSlice from './vitalsSlice';
./characterReducer.ts:10:import playStateSlice from './playStateSlice';
./characterSelectors.ts:9:} from './types';
./characterSelectors.ts:10:import { ABILITIES, SKILLS } from '../constants';
./characterSelectors.ts:11:import { createSelector } from './createSelector';
./characterSelectors.ts:12:import { calculatePendingChoices } from './pendingChoicesSelector';
./characterSheetSelectors.ts:10:} from './types';
./characterSheetSelectors.ts:11:import { ABILITIES, SKILLS } from '../constants';
./characterSheetSelectors.ts:12:import { createSelector } from './createSelector';
./characterSheetSelectors.ts:13:import { calculatePendingChoices } from './pendingChoicesSelector';
./characterSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./characterSlice.ts:2:import { Character } from './types';
./characterUtils.ts:3:import { Character, CharacterState, Ability, AbilityScores, BackstoryDetails, PhysicalCharacteristics, SelectedClass, Heritage, Background, SelectedFeat, SelectedProficiency, SelectedFightingStyle, CharacterItemInstance, EquippedItems, Currency, HitDicePool, WildShapeEquipmentOption, Resource, StateInstance, ExperimentalElixir, BardicInspiration, PaladinInfo, InteractionPrompt, SummonChoicePrompt, UncannyDodgePrompt, EffectInstance, Monster } from './types';
./characterValidator.service.ts:4:import { Character, StaticGameDataCache, ValidationError, GenerationStep, Ability, CharacterState } from './types';
./characterValidator.service.ts:5:import { calculatePendingChoices } from 'engine../pendingChoicesSelector';
./characterValidator.service.ts:6:import { selectCharacter } from 'engine/;
./characterValidator.service.ts:7:import { toCharacterState } from 'state/characterUtils';
./combat.ts:1:import { MapNpcInstance } from './character';
./combatFlowSlice.ts:1:import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
./combatFlowSlice.ts:2:import { CombatFlowState, CombatState, CombatResult } from './types';
./combatFlowSlice.ts:3:import { RootState } from './store';
./combatFlowSlice.ts:4:import { rollInitiative, loadCrucibleEncounter } from './entitySlice';
./combatFlowSlice.ts:5:import { triggerAiTurn } from './aiSlice';
./combatFlowSlice.ts:6:import { processEventQueue } from './eventSlice';
./combatFlowSlice.ts:7:import { logEvent, clearLog } from './logSlice';
./combatFlowSlice.ts:8:import { playStateActions } from './playStateSlice';
./combatFlowSlice.ts:189:import { entitySlice } from './entitySlice';
./combatSelectors.perf.ts:1:import { describe, it, expect } from 'vitest';
./combatSelectors.perf.ts:2:import { selectCombatUIData } from '../combatSelectors';
./combatSelectors.perf.ts:3:import { RootState } from 'state/store';
./combatSelectors.perf.ts:4:import { PersistPartial } from 'redux-persist/es/persistReducer';
./combatSelectors.ts:1:import { createSelector } from './createSelector';
./combatSelectors.ts:2:import { RootState } from 'state/store';
./combatSelectors.ts:3:import { Character, MapNpcInstance, Token, VTTMap } from './types';
./combatSelectors.ts:4:import { hasLineOfSight } from './ai/perception/lineOfSight';
./command.factory.ts:1:import { GameEvent, SimulationState, StaticGameDataCache, DeclareAttackEvent, DealDamageEvent } from './types';
./command.factory.ts:2:import { GameCommand } from './types';
./command.factory.ts:3:import { AttackCommand } from './attack.command';
./command.factory.ts:4:import { DealDamageCommand } from './dealDamage.command';
./commander.service.ts:3:import { ai, textModel, GeminiError } from '../geminiService';
./companions.ts:1:import { Companion } from './types';
./components.ts:3:export { AppMode } from './primitives';
./components/Header.tsx:1:import React from 'react';
./components/Header.tsx:2:import type { AppMode } from 'state/appSlice';
./components/routing/AppRouter.tsx:1:import React from 'react';
./components/routing/AppRouter.tsx:2:import { useAppSelector, useAppDispatch } from 'state/hooks';
./components/routing/AppRouter.tsx:3:import HomeView from '../../HomeView';
./components/routing/AppRouter.tsx:4:import BuilderView from '../../BuilderView';
./components/routing/AppRouter.tsx:5:import GenesisView from '../../GenesisView';
./components/routing/AppRouter.tsx:6:import WorldbuilderView from '../../WorldbuilderView';
./components/routing/AppRouter.tsx:7:import BestiaryView from '../../BestiaryView';
./components/routing/AppRouter.tsx:8:import CrucibleView from '../../CrucibleView';
./components/routing/AppRouter.tsx:9:import { PlayView } from '../../PlayView';
./components/routing/AppRouter.tsx:10:import { rosterSelectors, createCharacter, loadCharacter, deleteCharacter } from 'state/rosterSlice';
./components/shared/ToastContainer.tsx:1:export { default } from '../../ToastContainer';
./constants.ts:1:import { Ability } from './types/enums';
./cover.ts:2:import { BattlefieldState } from './types';
./cover.ts:3:import { hasLineOfSight } from './lineOfSight';
./crucibleReducer.ts:1:import { CrucibleActionResult, NpcAnimationState, SimState, VTTMap, MapNpcInstance, Token, InitiativeEntry, Monster, TerrainCell, EncounterConcept, VTTObject, StaticGameDataCache } from './types';
./crucibleReducer.ts:2:import { CrucibleAction } from './crucibleActions';
./crucibleReducer.ts:3:import { rollD20 } from '../utils/dice';
./crucibleReducer.ts:4:import { generateMapFromConcept } from '../utils/map';
./currency.ts:1:import { Currency } from './types';
./damage.calculator.test.ts:1:import { describe, it, expect } from 'vitest';
./damage.calculator.test.ts:2:import { DamageCalculator } from '../rules/damage.calculator';
./damage.calculator.test.ts:3:import { DamagePart, StaticGameDataCache } from './types';
./damage.calculator.ts:1:import { DamagePart, StaticGameDataCache, Monster, Character } from './types';
./damage.calculator.ts:2:import { rollDice } from '../../utils/dice';
./data.ts:1:import { EffectInstance } from './effects';
./data.ts:2:import { FeatEffect, ChoiceOption, Prerequisite, EnvironmentalInteractionEffect } from './effects';
./data.ts:3:import { CasterType, DamagePart, EffectDuration, ItemRarity, MonsterType, Movement, SpellTemplate, TerrainCell, WeaponProperty, ActionItem, MonsterAbilityScores, ActionType } from './primitives';
./data.ts:4:import type { ObjectBlueprint } from './vtt';
./data.ts:5:import { EffectType, ActionCost, Ability } from './enums';
./dataService.ts:1:import { Monster, MonsterType, Spell, Item, EquipmentPack, DndClass, Species, Background, Feat, ArtificerInfusion, FightingStyle, Maneuver, Invocation, Metamagic, CompanionBlueprint, EffectInstance, ActionCategory, Tool, StaticGameDataCache, Rune, ObjectBlueprint, AiArchetypeIndexEntry, AiArchetype } from './types';
./dealDamage.command.ts:1:import { GameCommand, CommandResult, ValidationResult, CommandContext } from './types';
./dealDamage.command.ts:2:import { SimulationState, DealDamageEvent, GameEvent, MapNpcInstance, Character } from './types';
./dealDamage.command.ts:3:import { DamageCalculator } from '../rules/damage.calculator';
./dealDamage.command.ts:4:import { produce } from 'immer';
./dm.service.ts:2:import { BattlefieldState, DialogueTurn, MapNpcInstance, Monster, NpcTurnResult, Token, TerrainCell, EncounterStrategy, VTTObject, StaticGameDataCache, TacticalObject, VTTMap } from './types';
./dm.service.ts:3:import { ai, textModel, GeminiError } from '../geminiService';
./dm.service.ts:4:import { SpatialGrid } from 'engine../spatialGrid.service';
./effects.ts:1:import { EffectDuration, InnateSpellFrequency, ActionType } from './primitives';
./effects.ts:2:import { EffectType, Ability } from './enums';
./entitySlice.ts:1:import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
./entitySlice.ts:2:import { VTTMap, Token, MapNpcInstance, Character, EncounterConcept, InitiativeEntry, Monster, EffectInstance } from './types';
./entitySlice.ts:3:import { createDefaultMap, generateMapFromConcept, buildSpatialIndex } from '../utils/map';
./entitySlice.ts:4:import { rollD20 } from '../utils/dice';
./entitySlice.ts:5:import { RootState } from './store';
./entitySlice.ts:6:import { SpatialGrid } from 'engine../spatialGrid.service';
./entitySlice.ts:7:import { selectCalculatedActiveCharacterSheet } from './selectors';
./event.processor.test.ts:1:import { describe, it, expect, vi } from 'vitest';
./event.processor.test.ts:2:import { EventProcessor } from '../event.processor';
./event.processor.test.ts:3:import { CommandFactory } from '../commands/command.factory';
./event.processor.test.ts:4:import { SimulationState, StaticGameDataCache, DeclareAttackEvent, GameEvent, Token, MapNpcInstance } from './types';
./event.processor.ts:1:import { GameEvent, SimulationState, PlayerChoicePrompt, StaticGameDataCache, GameEventType } from './types';
./event.processor.ts:2:import { CommandFactory } from './commands/command.factory';
./event.processor.ts:3:import { CommandResult, GameCommand } from './commands/types';
./eventSlice.ts:1:import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
./eventSlice.ts:2:import { GameEvent, PlayerChoicePrompt, SimulationState } from './types';
./eventSlice.ts:3:import { RootState } from './store';
./eventSlice.ts:4:import { EventProcessor } from 'engine../event.processor';
./eventSlice.ts:5:import { CommandFactory } from 'engine../commands/command.factory';
./eventSlice.ts:6:import { animationActions } from './animationSlice';
./eventSlice.ts:7:import { entitySlice } from './entitySlice';
./eventSlice.ts:8:import { endCombat, advanceTurn } from './combatFlowSlice';
./generationOrchestrator.service.ts:4:import { Character, StaticGameDataCache, GenerationStep, ValidationError, GenerationProgress, SelectedFeat, SelectedProficiency, Currency, StartingEquipmentOption, Item, EquipmentPack, PartialCharacter, CharacterState, Ability, SelectedClass } from './types';
./generationOrchestrator.service.ts:5:import { CharacterValidator } from '../validation/characterValidator.service';
./generationOrchestrator.service.ts:6:import { ai, textModel } from './client';
./generationOrchestrator.service.ts:7:import { prompts, schemas } from './prompts';
./generationOrchestrator.service.ts:8:import { selectCharacter } from 'engine/;
./generationOrchestrator.service.ts:9:import { calculatePendingChoices } from 'engine../pendingChoicesSelector';
./generationOrchestrator.service.ts:10:import { rollGold } from '../../utils/dice';
./generationOrchestrator.service.ts:11:import { inventoryActions } from './inventorySlice';
./generationOrchestrator.service.ts:12:import { createNewCharacterObject, toCharacterState } from 'state/characterUtils';
./genesisSlice.ts:2:import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
./genesisSlice.ts:3:import { GenesisState, PartialCharacter, GenerationStep, Character, CharacterState, StaticGameDataCache } from './types';
./genesisSlice.ts:4:import { RootState } from './store';
./genesisSlice.ts:5:import { GenerationOrchestrator } from './generationOrchestrator.service';
./genesisSlice.ts:6:import { selectCharacter } from 'engine/;
./genesisSlice.ts:7:import { toCharacterState, createNewCharacterObject } from './characterUtils';
./hooks.ts:1:import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
./hooks.ts:2:import { ThunkDispatch, AnyAction } from '@reduxjs/toolkit';
./hooks.ts:3:import type { RootState } from './store';
./imagen.service.ts:2:import { Character, EnvironmentalData } from './types';
./imagen.service.ts:3:import { ai, imageModel, GeminiError } from '../geminiService';
./imagen.service.ts:4:import { dataService } from '../dataService';
./index.ts:1:export { calculateCharacterSheet as selectCharacter } from './characterSheetSelectors';
./index.tsx:1:import React from 'react';
./index.tsx:2:import ReactDOM from 'react-dom/client';
./index.tsx:3:import { Provider } from 'react-redux';
./index.tsx:4:import { PersistGate } from 'redux-persist/integration/react';
./index.tsx:5:import { store, persistor } from './store';
./index.tsx:6:import App from './App';
./index.tsx:7:import { ToastProvider } from './ToastContext';
./inventorySlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./inventorySlice.ts:2:import { InventoryState, CharacterItemInstance, EquippedItems, Currency } from './types';
./lineOfSight.ts:2:import { TerrainCell } from './types';
./localAiService.ts:1:import { AIBlackboard, BTNode, BTNodeStatus, NodeMetadata, ParallelPolicy, AiArchetype, BehaviorTreeNodeDefinition, NodeTypeName, BattlefieldState, AiTurnIntent } from './types';
./localAiService.ts:2:import { SequenceNode, SelectorNode, ParallelNode } from './behaviorTree';
./localAiService.ts:3:import * as Nodes from './nodes';
./localAiService.ts:4:import { findPath } from '../pathfinding';
./localAiService.ts:5:import { dataService } from 'services./data.service';
./logSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./logSlice.ts:2:import { LogEntry, LogEntryType } from './types';
./map.service.ts:3:import { StaticGameDataCache, EncounterConcept, ObjectBlueprint } from './types';
./map.service.ts:4:import { ai, textModel, GeminiError } from '../geminiService';
./map.ts:2:import { VTTMap, Token, VTTObject, Character, EncounterConcept, Zone, Path, TerrainCell, MapNpcInstance, StaticGameDataCache, Monster, SpatialGrid } from './types';
./map.ts:3:import { mapDecorator } from 'services../mapDecorator.service';
./mapDecorator.service.ts:1:import { EncounterConcept } from './types';
./metaSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./metaSlice.ts:2:import { MetaState, SelectedClass, Heritage, Background, BackstoryDetails, PhysicalCharacteristics } from './types';
./nodes.ts:1:import { AIBlackboard, BTNode, BTNodeStatus, ActionItem, DamagePart, Token } from './types';
./nodes.ts:2:import { findBestTarget, findLastAttackerTarget, findMostWoundedEnemy } from './perception/threatAssessment';
./nodes.ts:3:import { hasLineOfSight } from './perception/lineOfSight';
./nodes.ts:4:import { findCover } from './perception/cover';
./nodes.ts:5:import { rollDice } from '../../utils/dice';
./pathfinding.ts:2:import { TerrainCell } from './types';
./pendingChoicesSelector.ts:2:import { CharacterState, StaticGameDataCache, PendingChoice, ClassFeature } from './types';
./playStateSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./playStateSlice.ts:2:import { PlayState, Character, StaticGameDataCache, EffectInstance, UncannyDodgePrompt, InteractionPrompt, SummonChoicePrompt, Companion, ExperimentalElixir, InnateSpell, Spell, StateInstance } from './types';
./primitives.ts:1:import type { Character, PartialCharacter } from './character';
./primitives.ts:2:import type { GenerationStep } from './generation';
./primitives.ts:3:import type { StaticGameDataCache } from './data';
./primitives.ts:4:import type { TriggeredEffect } from './effects';
./primitives.ts:5:import { Ability } from './enums';
./proficienciesSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./proficienciesSlice.ts:2:import { ProficienciesState, SelectedFeat, SelectedProficiency, SelectedFightingStyle } from './types';
./rosterSlice.ts:1:import { createSlice, PayloadAction, createEntityAdapter, createAsyncThunk } from '@reduxjs/toolkit';
./rosterSlice.ts:2:import { Character, CharacterState } from './types';
./rosterSlice.ts:3:import { RootState } from './store';
./rosterSlice.ts:4:import { setSheet as setCalculatedSheet } from './characterSlice';
./rosterSlice.ts:5:import { fromCharacterState, toCharacterState, createNewCharacterObject } from './characterUtils';
./rosterSlice.ts:6:import { testDummies } from './testDummies';
./rosterSlice.ts:7:import { setMode } from './appSlice';
./rosterSlice.ts:8:import { metaActions } from './metaSlice';
./rosterSlice.ts:9:import { abilitiesActions } from './abilitiesSlice';
./rosterSlice.ts:10:import { proficienciesActions } from './proficienciesSlice';
./rosterSlice.ts:11:import { inventoryActions } from './inventorySlice';
./rosterSlice.ts:12:import { spellsActions } from './spellsSlice';
./rosterSlice.ts:13:import { vitalsActions } from './vitalsSlice';
./rosterSlice.ts:14:import { playStateActions } from './playStateSlice';
./selectors.ts:1:import { RootState } from './store';
./selectors.ts:2:import { Character, CharacterState } from './types';
./selectors.ts:3:import { selectCharacter } from 'engine../characterSelectors';
./spatialGrid.service.ts:2:import type { Token } from './types';
./spellsSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./spellsSlice.ts:2:import { SpellsState } from './types';
./state/ToastContext.tsx:1:export { ToastProvider, useToast } from '../ToastContext';
./state/appSlice.ts:1:import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
./state/hooks.ts:1:import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
./state/hooks.ts:2:import type { RootState, AppDispatch } from './store';
./state/rosterSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./state/store.ts:1:import { configureStore, combineReducers } from '@reduxjs/toolkit';
./state/store.ts:2:import { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';
./state/store.ts:3:import storage from 'redux-persist/lib/storage';
./state/store.ts:5:import appReducer from './appSlice';
./state/store.ts:6:import rosterReducer from './rosterSlice';
./state/store.ts:7:import uiReducer from './uiSlice';
./state/uiSlice.ts:1:export { default } from '../uiSlice';
./state/uiSlice.ts:2:export * from '../uiSlice';
./store.ts:1:import { configureStore, combineReducers, Middleware } from '@reduxjs/toolkit';
./store.ts:2:import { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';
./store.ts:3:import storage from 'redux-persist/lib/storage';
./store.ts:4:import appReducer from './appSlice';
./store.ts:5:import rosterReducer from './rosterSlice';
./store.ts:6:import genesisReducer from './genesisSlice';
./store.ts:7:import { characterDataReducer } from 'engine../characterReducer';
./store.ts:8:import logReducer from './logSlice';
./store.ts:9:import uiReducer from './uiSlice';
./store.ts:10:import worldbuilderReducer from './worldbuilderSlice';
./store.ts:11:import builderReducer from './builderSlice';
./store.ts:12:import combatFlowReducer from './combatFlowSlice';
./store.ts:15:import entityReducer from './entitySlice';
./store.ts:16:import eventReducer from './eventSlice';
./store.ts:17:import animationReducer from './animationSlice';
./store.ts:18:import aiReducer from './aiSlice';
./store.ts:19:import { PERFORMANCE_WARNING_THRESHOLD_MS } from '../constants';
./terrain.ts:2:import * as THREE from 'three';
./terrain.ts:3:import { TerrainCell } from './types';
./testDummies.ts:1:import { Character } from './types';
./texture.service.ts:3:import { EnvironmentalData } from './types';
./texture.service.ts:4:import { generateMapTextures as generate } from './imagen.service';
./threatAssessment.ts:2:import { BattlefieldState, EncounterStrategy } from './types';
./types.ts:1:import { SimulationState, GameEvent, PlayerChoicePrompt, StaticGameDataCache } from './types';
./uiSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./uiSlice.ts:2:import { UIRollResult, CrucibleActionResult, ActionItem, Spell, ClassFeature } from './types';
./usePrevious.ts:1:import { useRef, useEffect } from 'react';
./utils.ts:1:import { ActionItem, FeatEffect, CritRangeEffect, Ability, MonsterAbilityScores } from './types';
./vfx.ts:2:import * as THREE from 'three';
./vfx.ts:3:import { Spell, VFXRequest } from './types';
./vitalsSlice.ts:1:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./vitalsSlice.ts:2:import { VitalsState } from './types';
./vite.config.ts:1:import path from 'path';
./vite.config.ts:2:import { defineConfig, loadEnv } from 'vite';
./vtt.ts:1:import { Spell, EncounterStrategy } from './data';
./vtt.ts:2:import { SpellTemplate, VTTTool, ObjectComponent, ActionItem, TerrainCell, BTNodeStatus, NodeMetadata, ParallelPolicy } from './primitives';
./vtt.ts:3:import * as THREE from 'three';
./vtt.ts:4:import { MapNpcInstance } from './character';
./vtt.ts:6:import { DEBUG_MODE } from '../../constants';
./vtt.ts:7:import { SpatialGrid } from 'engine../spatialGrid.service';
./vtt.ts:10:export { SpatialGrid } from 'engine../spatialGrid.service';
./world.service.ts:3:import { generateEncounterConcept } from './map.service';
./world.service.ts:4:import { generateScene, generateImage } from './imagen.service';
./world.service.ts:5:import { EncounterConcept } from './types';
./worldbuilderSlice.ts:2:import { createSlice, PayloadAction } from '@reduxjs/toolkit';
./worldbuilderSlice.ts:3:import { WorldbuilderState, EncounterConcept } from './types';
./AbilitiesStep.tsx:1:import React, { useState, useCallback } from 'react';
./AbilitiesStep.tsx:2:import { Character, Ability, AbilityScores } from './types';
./AbilitiesStep.tsx:3:import { ABILITIES, STANDARD_ARRAY } from '../../constants';
./AbilitiesStep.tsx:4:import { useAppSelector } from 'state/hooks';
./AbilitiesStep.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./AbilitiesStep.tsx:6:import { useCharacterActions } from '../../hooks/useCharacterActions';
./ActionsPanel.tsx:1:import React, { useState } from 'react';
./ActionsPanel.tsx:2:import { ActionCategory, ActionItem, Character } from './types';
./ActionsPanel.tsx:3:import { usePlayerActions } from '../../hooks/usePlayerActions';
./ActionsPanel.tsx:4:import { useAppSelector } from 'state/hooks';
./ActionsPanel.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ActiveEffectsPanel.tsx:1:import React, { useState } from 'react';
./ActiveEffectsPanel.tsx:2:import { Character, EffectInstance } from './types';
./ActiveEffectsPanel.tsx:3:import AddConditionModal from './AddConditionModal';
./ActiveEffectsPanel.tsx:4:import { playStateActions } from './playStateSlice';
./ActiveEffectsPanel.tsx:5:import { useAppDispatch, useAppSelector } from 'state/hooks';
./ActiveEffectsPanel.tsx:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./AddConditionModal.tsx:1:import React, { useState, useEffect } from 'react';
./AddConditionModal.tsx:2:import { dataService } from 'services./data.service';
./AddConditionModal.tsx:3:import { EffectInstance, Character } from './types';
./AddConditionModal.tsx:4:import { playStateActions } from './playStateSlice';
./AddConditionModal.tsx:5:import { useAppDispatch } from 'state/hooks';
./AddConditionModal.tsx:6:import { entitySlice } from 'state/entitySlice';
./AddConditionModal.tsx:7:import Modal from '../shared/Modal';
./AdjudicationPrompt.tsx:1:import React from 'react';
./AdjudicationPrompt.tsx:2:import { PlayerChoicePrompt, SavingThrowChoice, ReactionChoice, Character } from './types';
./AdjudicationPrompt.tsx:3:import { rollD20 } from '../../utils/dice';
./AdjudicationPrompt.tsx:4:import { useAppDispatch, useAppSelector } from 'state/hooks';
./AdjudicationPrompt.tsx:5:import { resolvePlayerChoice, postGameEvent } from 'state/eventSlice';
./AdjudicationPrompt.tsx:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./AdjudicationPrompt.tsx:7:import Modal from '../shared/Modal';
./ArcaneRecoveryModal.tsx:1:import React, { useState, useMemo } from 'react';
./ArcaneRecoveryModal.tsx:2:import { useToast } from 'state/ToastContext';
./ArcaneRecoveryModal.tsx:3:import { useAppSelector, useAppDispatch } from 'state/hooks';
./ArcaneRecoveryModal.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ArcaneRecoveryModal.tsx:5:import { logEvent } from 'state/logSlice';
./ArcaneRecoveryModal.tsx:6:import { Character } from './types';
./ArcaneRecoveryModal.tsx:7:import { playStateActions } from './playStateSlice';
./ArcaneRecoveryModal.tsx:8:import Modal from '../shared/Modal';
./BackgroundStep.tsx:1:import React, { useState } from 'react';
./BackgroundStep.tsx:2:import { Character, Background, PhysicalCharacteristics, Trait, PendingChoice } from './types';
./BackgroundStep.tsx:3:import { generateBackstory } from 'services../ai/character.service';
./BackgroundStep.tsx:4:import { dataService, BackgroundIndexEntry } from 'services./data.service';
./BackgroundStep.tsx:5:import InlineProficiencySelector from '../shared/InlineProficiencySelector';
./BackgroundStep.tsx:6:import { useAppSelector } from 'state/hooks';
./BackgroundStep.tsx:7:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./BackgroundStep.tsx:8:import { useCharacterActions } from '../../hooks/useCharacterActions';
./BestiaryView.tsx:2:import React, { useState, useMemo, useEffect } from 'react';
./BestiaryView.tsx:3:import { Monster, MonsterType } from './types';
./BestiaryView.tsx:4:import MonsterStatBlock from './MonsterStatBlock';
./BestiaryView.tsx:5:import { dataService, MonsterIndexEntry } from 'services./data.service';
./BestiaryView.tsx:6:import { useAppSelector, useAppDispatch } from 'state/hooks';
./BestiaryView.tsx:7:import { queueMonsterSummon, setMode } from 'state/appSlice';
./BestiaryView.tsx:8:import { useToast } from 'state/ToastContext';
./BestiaryView.tsx:9:import MonsterTypeIconFactory from '../icons/MonsterTypeIconFactory';
./CastSpellModal.tsx:1:import React, { useMemo, useState, useEffect } from 'react';
./CastSpellModal.tsx:2:import { Spell, Character, Metamagic } from './types';
./CastSpellModal.tsx:3:import { dataService } from 'services./data.service';
./CastSpellModal.tsx:4:import { useToast } from 'state/ToastContext';
./CastSpellModal.tsx:5:import { useAppDispatch } from 'state/hooks';
./CastSpellModal.tsx:6:import { playStateActions } from './playStateSlice';
./CastSpellModal.tsx:7:import Modal from '../shared/Modal';
./CharacterTab.tsx:1:import React from 'react';
./CharacterTab.tsx:2:import { Character } from './types';
./CharacterTab.tsx:3:import Accordion from '../../shared/Accordion';
./CharacterTab.tsx:4:import Vitals from '../Vitals';
./CharacterTab.tsx:5:import FeaturesPanel from '../FeaturesPanel';
./CharacterTab.tsx:6:import ResourcePanel from '../ResourcePanel';
./CharacterTab.tsx:7:import { useAppSelector } from 'state/hooks';
./CharacterTab.tsx:8:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./CharacterTab.tsx:9:import { usePlayerActions } from '../../../hooks/usePlayerActions';
./ChoiceSelector.tsx:1:import React, { useState, useMemo } from 'react';
./ChoiceSelector.tsx:2:import { Character, PendingChoice, Maneuver, Invocation, Metamagic, Spell, Rune } from './types';
./ChoiceSelector.tsx:3:import { useAppSelector } from 'state/hooks';
./ChoiceSelector.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ClassDetail.tsx:1:import React, { useMemo, useEffect, useRef } from 'react';
./ClassDetail.tsx:2:import { Character, DndClass, SelectedClass, PendingChoice, Invocation, Prerequisite, ClassFeature } from './types';
./ClassDetail.tsx:3:import { useToast } from 'state/ToastContext';
./ClassDetail.tsx:4:import ChoiceSelector from '../../shared/ChoiceSelector';
./ClassDetail.tsx:5:import InlineFightingStyleSelector from '../../shared/InlineFightingStyleSelector';
./ClassDetail.tsx:6:import InlineProficiencySelector from '../../shared/InlineProficiencySelector';
./ClassDetail.tsx:7:import InlineFeatASISelector from '../../shared/InlineFeatASISelector';
./ClassDetail.tsx:8:import { useAppSelector } from 'state/hooks';
./ClassDetail.tsx:9:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ClassDetail.tsx:10:import { useCharacterActions } from '../../../hooks/useCharacterActions';
./ClassGrid.tsx:1:import React from 'react';
./ClassGrid.tsx:2:import ClassIconFactory from '../../icons/ClassIconFactory';
./ClassGrid.tsx:3:import { useAppSelector } from 'state/hooks';
./ClassStep.tsx:1:import React, { useState } from 'react';
./ClassStep.tsx:2:import { useAppSelector } from 'state/hooks';
./ClassStep.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ClassStep.tsx:4:import ClassGrid from './class/ClassGrid';
./ClassStep.tsx:5:import ClassDetail from './class/ClassDetail';
./ClassStep.tsx:6:import { useCharacterActions } from '../../hooks/useCharacterActions';
./CombatTab.tsx:1:import React from 'react';
./CombatTab.tsx:2:import { Character } from './types';
./CombatTab.tsx:3:import Accordion from '../../shared/Accordion';
./CombatTab.tsx:4:import ActionsPanel from '../ActionsPanel';
./CombatTab.tsx:5:import SkillsPanel from '../SkillsPanel';
./CombatTab.tsx:6:import SavingThrowsPanel from '../SavingThrowsPanel';
./CombatTab.tsx:7:import ActiveEffectsPanel from '../ActiveEffectsPanel';
./CombatTab.tsx:8:import ConditionsPanel from '../ConditionsPanel';
./CombatTab.tsx:9:import InitiativeTracker from '../InitiativeTracker';
./CombatTab.tsx:10:import InteractionPanel from '../InteractionPanel';
./CombatTab.tsx:11:import InvocationsPanel from '../InvocationsPanel';
./CombatTab.tsx:12:import MetamagicPanel from '../MetamagicPanel';
./CombatTab.tsx:13:import { useAppSelector } from 'state/hooks';
./CombatTab.tsx:14:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./CompanionSheet.tsx:1:import React, { useState } from 'react';
./CompanionSheet.tsx:2:import { Companion, ActionItem, Movement, Character } from './types';
./CompanionSheet.tsx:3:import { useAppDispatch, useAppSelector } from 'state/hooks';
./CompanionSheet.tsx:4:import { playStateActions } from './playStateSlice';
./CompanionSheet.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./CompanionSheet.tsx:6:import { usePlayerActions } from '../../hooks/usePlayerActions';
./CompanionsTab.tsx:1:import React from 'react';
./CompanionsTab.tsx:2:import { Character } from './types';
./CompanionsTab.tsx:3:import CompanionSheet from '../CompanionSheet';
./CompanionsTab.tsx:4:import HordeSheet from '../HordeSheet';
./CompanionsTab.tsx:5:import ElixirsPanel from '../ElixirsPanel';
./CompanionsTab.tsx:6:import { groupCompanions } from '../../../utils/companions';
./CompanionsTab.tsx:7:import { useAppSelector, useAppDispatch } from 'state/hooks';
./CompanionsTab.tsx:8:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./CompanionsTab.tsx:9:import { usePlayerActions } from '../../../hooks/usePlayerActions';
./CompanionsTab.tsx:10:import { uiActions } from 'state/uiSlice';
./CompanionsTab.tsx:11:import Accordion from '../../shared/Accordion';
./CreatorsWorkbenchModal.tsx:1:import React, { useState, useMemo, useEffect } from 'react';
./CreatorsWorkbenchModal.tsx:2:import { Character, ClassFeature, Item, CharacterItemInstance, Rune, Weapon, Tool, DndClass, Spell } from './types';
./CreatorsWorkbenchModal.tsx:3:import { useToast } from 'state/ToastContext';
./CreatorsWorkbenchModal.tsx:4:import { dataService } from 'services./data.service';
./CreatorsWorkbenchModal.tsx:5:import { copperToCurrency, currencyToCopper } from '../../utils/currency';
./CreatorsWorkbenchModal.tsx:6:import { useAppSelector, useAppDispatch } from 'state/hooks';
./CreatorsWorkbenchModal.tsx:7:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./CreatorsWorkbenchModal.tsx:8:import { logEvent } from 'state/logSlice';
./CreatorsWorkbenchModal.tsx:9:import { inventoryActions } from './inventorySlice';
./CreatorsWorkbenchModal.tsx:10:import Modal from '../shared/Modal';
./DeathSavesTracker.tsx:2:import React from 'react';
./DeathSavesTracker.tsx:3:import { Character } from './types';
./DeathSavesTracker.tsx:4:import { vitalsActions } from './vitalsSlice';
./DeathSavesTracker.tsx:5:import { rollD20 } from '../../utils/dice';
./DeathSavesTracker.tsx:6:import { useAppDispatch } from 'state/hooks';
./DivineSmiteModal.tsx:1:import React from 'react';
./DivineSmiteModal.tsx:2:import { ActionItem, Character } from './types';
./DivineSmiteModal.tsx:3:import { useToast } from 'state/ToastContext';
./DivineSmiteModal.tsx:4:import { rollDice } from '../../utils/dice';
./DivineSmiteModal.tsx:5:import { useAppSelector, useAppDispatch } from 'state/hooks';
./DivineSmiteModal.tsx:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./DivineSmiteModal.tsx:7:import { playStateActions } from './playStateSlice';
./DivineSmiteModal.tsx:8:import Modal from '../shared/Modal';
./DmPanel.tsx:2:import React, { useState, useEffect, useMemo } from 'react';
./DmPanel.tsx:3:import { useAppSelector, useAppDispatch } from 'state/hooks';
./DmPanel.tsx:4:import { dataService, MonsterIndexEntry } from 'services./data.service';
./DmPanel.tsx:5:import { Monster, EncounterConcept } from './types';
./DmPanel.tsx:6:import MonsterStatBlockCard from './MonsterStatBlockCard';
./DmPanel.tsx:7:import { useVttController } from '../../hooks/useVttController';
./DmPanel.tsx:8:import { queueMonsterSummon, clearMonsterSummon } from 'state/appSlice';
./ElixirsPanel.tsx:1:import React from 'react';
./ElixirsPanel.tsx:2:import { Character } from './types';
./ElixirsPanel.tsx:3:import { playStateActions } from './playStateSlice';
./ElixirsPanel.tsx:4:import { useAppSelector, useAppDispatch } from 'state/hooks';
./ElixirsPanel.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./EncounterForm.tsx:2:import React from 'react';
./EncounterForm.tsx:3:import { useAppDispatch, useAppSelector } from 'state/hooks';
./EncounterForm.tsx:4:import { setContext, setTheme, setPartyLevel, setPartySize, setDifficulty } from 'state/worldbuilderSlice';
./EquipmentStep.tsx:1:import React, { useState, useMemo, useEffect } from 'react';
./EquipmentStep.tsx:2:import { Character, CharacterItemInstance, Item, EquipmentPack, Armor, DndClass } from './types';
./EquipmentStep.tsx:3:import { currencyToCopper, copperToCurrency } from '../../utils/currency';
./EquipmentStep.tsx:4:import CurrencyManager from '../shared/CurrencyManager';
./EquipmentStep.tsx:5:import InlineStartingEquipmentSelector from './InlineStartingEquipmentSelector';
./EquipmentStep.tsx:6:import { useAppSelector } from 'state/hooks';
./EquipmentStep.tsx:7:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./EquipmentStep.tsx:8:import { useCharacterActions } from '../../hooks/useCharacterActions';
./FeatsStep.tsx:1:import React from 'react';
./FeatsStep.tsx:2:import { Character, Feat, PendingChoice, Ability, SelectedFeat } from './types';
./FeatsStep.tsx:3:import { ABILITIES, SKILLS } from '../../constants';
./FeatsStep.tsx:4:import InlineProficiencySelector from '../shared/InlineProficiencySelector';
./FeatsStep.tsx:5:import InlineMagicInitiateSelector from '../shared/InlineMagicInitiateSelector';
./FeatsStep.tsx:6:import InlineFeatASISelector from '../shared/InlineFeatASISelector';
./FeatsStep.tsx:7:import { useAppSelector } from 'state/hooks';
./FeatsStep.tsx:8:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./FeatsStep.tsx:9:import { useCharacterActions } from '../../hooks/useCharacterActions';
./FeaturesPanel.tsx:3:import React, { useMemo, useState, useEffect } from 'react';
./FeaturesPanel.tsx:4:import { Character, Maneuver, ClassFeature } from './types';
./FeaturesPanel.tsx:5:import { dataService } from 'services./data.service';
./FeaturesPanel.tsx:6:import { useToast } from 'state/ToastContext';
./FeaturesPanel.tsx:7:import { useAppDispatch } from 'state/hooks';
./FeaturesPanel.tsx:8:import { playStateActions } from './playStateSlice';
./FeaturesPanel.tsx:9:import { usePlayerActions } from '../../hooks/usePlayerActions';
./FontOfMagicModal.tsx:1:import React, { useMemo } from 'react';
./FontOfMagicModal.tsx:2:import { useToast } from 'state/ToastContext';
./FontOfMagicModal.tsx:3:import { useAppSelector, useAppDispatch } from 'state/hooks';
./FontOfMagicModal.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./FontOfMagicModal.tsx:5:import { logEvent } from 'state/logSlice';
./FontOfMagicModal.tsx:6:import { Character } from './types';
./FontOfMagicModal.tsx:7:import { playStateActions } from './playStateSlice';
./FontOfMagicModal.tsx:8:import Modal from '../shared/Modal';
./GenerationProgress.tsx:2:import React from 'react';
./GenerationProgress.tsx:3:import { useAppSelector } from 'state/hooks';
./GenesisView.tsx:2:import React, { useState, useEffect } from 'react';
./GenesisView.tsx:3:import { useToast } from 'state/ToastContext';
./GenesisView.tsx:4:import { useAppSelector, useAppDispatch } from 'state/hooks';
./GenesisView.tsx:5:import { addCharacter, loadCharacter } from 'state/rosterSlice';
./GenesisView.tsx:6:import { setMode } from 'state/appSlice';
./GenesisView.tsx:7:import { startOrResumeGeneration, clearGenesisState } from 'state/genesisSlice';
./GenesisView.tsx:8:import { Character, PartialCharacter } from './types';
./GenesisView.tsx:9:import GenesisSummaryView from './GenesisSummaryView';
./Header.tsx:2:import React from 'react';
./Header.tsx:3:import { AppMode } from './types';
./Header.tsx:4:import { useAppSelector, useAppDispatch } from './hooks';
./Header.tsx:5:import { setMode, toggleDmMode } from 'state/appSlice';
./HomeView.tsx:2:import React, { useState, useEffect, useMemo } from 'react';
./HomeView.tsx:3:import { Character } from './types';
./HomeView.tsx:4:import { dataService, ClassIndexEntry } from 'services./data.service';
./HomeView.tsx:5:import { useAppDispatch } from 'state/hooks';
./HomeView.tsx:6:import { setMode } from 'state/appSlice';
./HordeSheet.tsx:1:import React, { useState } from 'react';
./HordeSheet.tsx:2:import { Companion, ActionItem, Movement, Character } from './types';
./HordeSheet.tsx:3:import { useAppDispatch } from 'state/hooks';
./HordeSheet.tsx:4:import { playStateActions } from './playStateSlice';
./HordeSheet.tsx:5:import { usePlayerActions } from '../../hooks/usePlayerActions';
./InfusionsStep.tsx:1:import React, { useState, useMemo } from 'react';
./InfusionsStep.tsx:2:import { Character, ArtificerInfusion, Item, Weapon, Armor, Shield } from './types';
./InfusionsStep.tsx:3:import { useAppSelector } from 'state/hooks';
./InfusionsStep.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InfusionsStep.tsx:5:import { useCharacterActions } from '../../hooks/useCharacterActions';
./InitiativeTracker.tsx:1:import React from 'react';
./InitiativeTracker.tsx:2:import { useAppSelector, useAppDispatch } from 'state/hooks';
./InitiativeTracker.tsx:3:import { InitiativeEntry, Monster, ActionItem } from './types';
./InitiativeTracker.tsx:4:import { logEvent } from 'state/logSlice';
./InitiativeTracker.tsx:5:import { entitySlice } from 'state/entitySlice';
./InitiativeTracker.tsx:6:import { useVttController } from '../../hooks/useVttController';
./InitiativeTracker.tsx:7:import { startCombat, endCombat } from 'state/combatFlowSlice';
./InlineFeatASISelector.tsx:2:import React, { useState, useMemo, useEffect } from 'react';
./InlineFeatASISelector.tsx:3:import { Character, Feat, Prerequisite, Ability, SelectedFeat, PendingChoice } from './types';
./InlineFeatASISelector.tsx:4:import { dataService } from 'services./data.service';
./InlineFeatASISelector.tsx:5:import { ABILITIES } from '../../constants';
./InlineFeatASISelector.tsx:6:import { useAppSelector, useAppDispatch } from 'state/hooks';
./InlineFeatASISelector.tsx:7:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InlineFeatASISelector.tsx:8:import { useToast } from 'state/ToastContext';
./InlineFeatASISelector.tsx:9:import { proficienciesActions } from './proficienciesSlice';
./InlineFightingStyleSelector.tsx:2:import React, { useState, useMemo, useEffect } from 'react';
./InlineFightingStyleSelector.tsx:3:import { FightingStyle, PendingChoice, Character } from './types';
./InlineFightingStyleSelector.tsx:4:import { dataService } from 'services./data.service';
./InlineFightingStyleSelector.tsx:5:import { useToast } from 'state/ToastContext';
./InlineFightingStyleSelector.tsx:6:import { useAppSelector, useAppDispatch } from 'state/hooks';
./InlineFightingStyleSelector.tsx:7:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InlineFightingStyleSelector.tsx:8:import { proficienciesActions } from './proficienciesSlice';
./InlineMagicInitiateSelector.tsx:2:import React, { useState, useEffect, useMemo } from 'react';
./InlineMagicInitiateSelector.tsx:3:import { PendingChoice, DndClass, Spell, SelectedFeat, Character } from './types';
./InlineMagicInitiateSelector.tsx:4:import { dataService } from 'services./data.service';
./InlineMagicInitiateSelector.tsx:5:import { useAppSelector, useAppDispatch } from 'state/hooks';
./InlineMagicInitiateSelector.tsx:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InlineMagicInitiateSelector.tsx:7:import { useToast } from 'state/ToastContext';
./InlineMagicInitiateSelector.tsx:8:import { proficienciesActions } from './proficienciesSlice';
./InlineProficiencySelector.tsx:2:import React, { useState, useMemo, useEffect } from 'react';
./InlineProficiencySelector.tsx:3:import { PendingChoice, Tool, Character, Language } from './types';
./InlineProficiencySelector.tsx:4:import { SKILLS } from '../../constants';
./InlineProficiencySelector.tsx:5:import { dataService } from 'services./data.service';
./InlineProficiencySelector.tsx:6:import { useToast } from 'state/ToastContext';
./InlineProficiencySelector.tsx:7:import { useAppSelector, useAppDispatch } from 'state/hooks';
./InlineProficiencySelector.tsx:8:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InlineProficiencySelector.tsx:9:import { proficienciesActions } from './proficienciesSlice';
./InlineStartingEquipmentSelector.tsx:2:import React, { useState, useMemo, useEffect } from 'react';
./InlineStartingEquipmentSelector.tsx:3:import { DndClass, StartingEquipmentOption, Currency, Item, EquipmentPack, Character } from './types';
./InlineStartingEquipmentSelector.tsx:4:import { rollGold } from '../../utils/dice';
./InlineStartingEquipmentSelector.tsx:5:import { copperToCurrency, currencyToCopper } from '../../utils/currency';
./InlineStartingEquipmentSelector.tsx:6:import { dataService } from 'services./data.service';
./InlineStartingEquipmentSelector.tsx:7:import { useToast } from 'state/ToastContext';
./InlineStartingEquipmentSelector.tsx:8:import { useAppSelector, useAppDispatch } from 'state/hooks';
./InlineStartingEquipmentSelector.tsx:9:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InlineStartingEquipmentSelector.tsx:10:import { inventoryActions } from './inventorySlice';
./InteractionModal.tsx:1:import React, { useState } from 'react';
./InteractionModal.tsx:2:import { InteractionPrompt, Character } from './types';
./InteractionModal.tsx:3:import { useToast } from 'state/ToastContext';
./InteractionModal.tsx:4:import { useAppSelector, useAppDispatch } from 'state/hooks';
./InteractionModal.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InteractionModal.tsx:6:import { logEvent } from 'state/logSlice';
./InteractionModal.tsx:7:import { playStateActions } from './playStateSlice';
./InteractionModal.tsx:8:import Modal from '../shared/Modal';
./InteractionPanel.tsx:2:import React from 'react';
./InteractionPanel.tsx:3:import { useAppSelector } from 'state/hooks';
./InteractionPanel.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InteractionPanel.tsx:5:import { Character, ActionItem } from './types';
./InteractionPanel.tsx:6:import { usePlayerActions } from '../../hooks/usePlayerActions';
./InventoryModal.tsx:1:import React from 'react';
./InventoryModal.tsx:2:import { useAppSelector } from 'state/hooks';
./InventoryModal.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InventoryModal.tsx:4:import InventoryPanel from '../InventoryPanel';
./InventoryModal.tsx:5:import ToolsPanel from '../ToolsPanel';
./InventoryModal.tsx:6:import { usePlayerActions } from '../../../hooks/usePlayerActions';
./InventoryModal.tsx:7:import Modal from '../../shared/Modal';
./InventoryPanel.tsx:1:import React, { useState, useMemo, useEffect } from 'react';
./InventoryPanel.tsx:2:import { Character, Item, ItemRarity, CharacterItemInstance, ArtificerInfusion } from './types';
./InventoryPanel.tsx:3:import CurrencyManager from '../shared/CurrencyManager';
./InventoryPanel.tsx:4:import { dataService } from 'services./data.service';
./InventoryPanel.tsx:5:import { useToast } from 'state/ToastContext';
./InventoryPanel.tsx:6:import { inventoryActions } from './inventorySlice';
./InventoryPanel.tsx:7:import { useAppDispatch } from 'state/hooks';
./InventoryTab.tsx:3:import React from 'react';
./InventoryTab.tsx:4:import { Character } from './types';
./InventoryTab.tsx:5:import Accordion from '../../shared/Accordion';
./InventoryTab.tsx:6:import InventoryPanel from '../InventoryPanel';
./InventoryTab.tsx:7:import ToolsPanel from '../ToolsPanel';
./InventoryTab.tsx:8:import { useAppSelector } from 'state/hooks';
./InventoryTab.tsx:9:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InventoryTab.tsx:10:import { usePlayerActions } from '../../../hooks/usePlayerActions';
./InvocationsPanel.tsx:3:import React from 'react';
./InvocationsPanel.tsx:4:import { useAppSelector } from 'state/hooks';
./InvocationsPanel.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./InvocationsPanel.tsx:6:import { Character, InnateSpellcastingEffect, Invocation } from './types';
./InvocationsPanel.tsx:7:import { usePlayerActions } from '../../hooks/usePlayerActions';
./KnownSpellsManager.tsx:1:import React, { useState, useMemo } from 'react';
./KnownSpellsManager.tsx:2:import { Character, DndClass, Spell, PendingChoice } from './types';
./KnownSpellsManager.tsx:3:import { useToast } from 'state/ToastContext';
./KnownSpellsManager.tsx:4:import { useAppSelector } from 'state/hooks';
./KnownSpellsManager.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./KnownSpellsManager.tsx:6:import { useCharacterActions } from '../../../hooks/useCharacterActions';
./KnownSpellsManager.tsx:7:import SpellCard from './SpellCard';
./KnownSpellsManager.tsx:8:import LearnSpellsModal from './LearnSpellsModal';
./KnownSpellsManager.tsx:9:import MysticArcanumSelector from './MysticArcanumSelector';
./LayOnHandsModal.tsx:1:import React, { useState } from 'react';
./LayOnHandsModal.tsx:2:import { useToast } from 'state/ToastContext';
./LayOnHandsModal.tsx:3:import { useAppSelector, useAppDispatch } from 'state/hooks';
./LayOnHandsModal.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./LayOnHandsModal.tsx:5:import { logEvent } from 'state/logSlice';
./LayOnHandsModal.tsx:6:import { Character } from './types';
./LayOnHandsModal.tsx:7:import { playStateActions } from './playStateSlice';
./LayOnHandsModal.tsx:8:import Modal from '../shared/Modal';
./LearnSpellsModal.tsx:1:import React, { useState, useMemo } from 'react';
./LearnSpellsModal.tsx:2:import { Character, DndClass, Spell } from './types';
./LearnSpellsModal.tsx:3:import { useAppSelector } from 'state/hooks';
./LearnSpellsModal.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./LogPanel.tsx:1:import React, { useRef, useEffect, useMemo } from 'react';
./LogPanel.tsx:2:import { LogEntry, LogEntryType } from './types';
./LogPanel.tsx:3:import { useAppSelector, useAppDispatch } from 'state/hooks';
./LogPanel.tsx:4:import { clearLog, setLogFilter } from 'state/logSlice';
./MetamagicPanel.tsx:1:import React, { useState, useEffect, useMemo } from 'react';
./MetamagicPanel.tsx:2:import { useAppSelector } from 'state/hooks';
./MetamagicPanel.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./MetamagicPanel.tsx:4:import { Character, Metamagic } from './types';
./MetamagicPanel.tsx:5:import { dataService } from 'services./data.service';
./ModalContainer.tsx:1:import React, { useCallback } from 'react';
./ModalContainer.tsx:2:import { useAppSelector, useAppDispatch } from 'state/hooks';
./ModalContainer.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ModalContainer.tsx:4:import ShortRestModal from './ShortRestModal';
./ModalContainer.tsx:5:import DivineSmiteModal from './DivineSmiteModal';
./ModalContainer.tsx:6:import LayOnHandsModal from './LayOnHandsModal';
./ModalContainer.tsx:7:import ArcaneRecoveryModal from './ArcaneRecoveryModal';
./ModalContainer.tsx:8:import FontOfMagicModal from './FontOfMagicModal';
./ModalContainer.tsx:9:import SummoningModal from './SummoningModal';
./ModalContainer.tsx:10:import SummoningChoiceModal from './SummoningChoiceModal';
./ModalContainer.tsx:11:import InteractionModal from './InteractionModal';
./ModalContainer.tsx:12:import AdjudicationPrompt from './AdjudicationPrompt';
./ModalContainer.tsx:13:import CreatorsWorkbenchModal from './CreatorsWorkbenchModal';
./ModalContainer.tsx:14:import DialogueModal from './DialogueModal';
./ModalContainer.tsx:15:import InventoryModal from './modals/InventoryModal';
./ModalContainer.tsx:16:import SpellsModal from './modals/SpellsModal';
./ModalContainer.tsx:17:import ActionsPanel from './ActionsPanel'; 
./ModalContainer.tsx:18:import InteractionPanel from './InteractionPanel'; 
./ModalContainer.tsx:19:import Modal from '../shared/Modal';
./ModalContainer.tsx:20:import { Character, MapNpcInstance } from './types';
./ModalContainer.tsx:21:import { usePlayerActions } from '../../hooks/usePlayerActions';
./ModalContainer.tsx:22:import { useDialogueManager } from '../../hooks/useDialogueManager';
./ModalContainer.tsx:23:import { uiActions } from 'state/uiSlice';
./ModalContainer.tsx:24:import { playStateActions } from './playStateSlice';
./MysticArcanumSelector.tsx:1:import React from 'react';
./MysticArcanumSelector.tsx:2:import { Character, DndClass, Spell } from './types';
./MysticArcanumSelector.tsx:3:import { useAppSelector } from 'state/hooks';
./MysticArcanumSelector.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./MysticArcanumSelector.tsx:5:import { useCharacterActions } from '../../../hooks/useCharacterActions';
./NpcSheetPanel.tsx:1:import React, { useState, useEffect } from 'react';
./NpcSheetPanel.tsx:2:import { MapNpcInstance, Monster, ActionItem, EffectInstance } from './types';
./NpcSheetPanel.tsx:3:import { dataService } from 'services./data.service';
./NpcSheetPanel.tsx:4:import { useToast } from 'state/ToastContext';
./NpcSheetPanel.tsx:5:import { usePlayerActions } from '../../hooks/usePlayerActions';
./NpcSheetPanel.tsx:6:import { commanderService } from 'services../ai/commander.service';
./NpcSheetPanel.tsx:7:import { useAppSelector, useAppDispatch } from 'state/hooks';
./NpcSheetPanel.tsx:8:import { entitySlice } from 'state/entitySlice';
./NpcSheetPanel.tsx:9:import AddConditionModal from './AddConditionModal';
./ObjectInteractionPanel.tsx:1:import React from 'react';
./ObjectInteractionPanel.tsx:2:import { VTTObject, ObjectBlueprint } from './types';
./ObjectInteractionPanel.tsx:3:import { useAppSelector } from 'state/hooks';
./PreparedSpellsManager.tsx:1:import React, { useMemo } from 'react';
./PreparedSpellsManager.tsx:2:import { DndClass, Spell } from './types';
./PreparedSpellsManager.tsx:3:import { useAppSelector } from 'state/hooks';
./PreparedSpellsManager.tsx:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./PreparedSpellsManager.tsx:5:import { useCharacterActions } from '../../../hooks/useCharacterActions';
./PreparedSpellsManager.tsx:6:import { useToast } from 'state/ToastContext';
./PreparedSpellsManager.tsx:7:import SpellCard from './SpellCard';
./ResourcePanel.tsx:3:import React from 'react';
./ResourcePanel.tsx:4:import { useAppSelector, useAppDispatch } from 'state/hooks';
./ResourcePanel.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ResourcePanel.tsx:6:import { Character } from './types';
./ResourcePanel.tsx:7:import { playStateActions } from './playStateSlice';
./SavingThrowsPanel.tsx:1:import React from 'react';
./SavingThrowsPanel.tsx:2:import { SavingThrowItem } from './types';
./SavingThrowsPanel.tsx:3:import { usePlayerActions } from '../../hooks/usePlayerActions';
./SavingThrowsPanel.tsx:4:import { useAppSelector } from 'state/hooks';
./SavingThrowsPanel.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./SceneDisplay.tsx:1:import React from 'react';
./SceneDisplay.tsx:2:import { useAppSelector, useAppDispatch } from 'state/hooks';
./SceneDisplay.tsx:3:import { entitySlice } from 'state/entitySlice';
./ShortRestModal.tsx:1:import React, { useState, useMemo } from 'react';
./ShortRestModal.tsx:2:import { useToast } from 'state/ToastContext';
./ShortRestModal.tsx:3:import { rollDice } from '../../utils/dice';
./ShortRestModal.tsx:4:import { useAppSelector, useAppDispatch } from 'state/hooks';
./ShortRestModal.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./ShortRestModal.tsx:6:import { logEvent } from 'state/logSlice';
./ShortRestModal.tsx:7:import { Character, Ability } from './types';
./ShortRestModal.tsx:8:import { vitalsActions } from './vitalsSlice';
./ShortRestModal.tsx:9:import { playStateActions } from './playStateSlice';
./ShortRestModal.tsx:10:import Modal from '../shared/Modal';
./SidebarContainer.tsx:1:import React, { useState } from 'react';
./SidebarContainer.tsx:2:import { useAppSelector } from 'state/hooks';
./SidebarContainer.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./SidebarContainer.tsx:4:import { usePlayerActions } from '../../../hooks/usePlayerActions';
./SidebarContainer.tsx:5:import Vitals from '../Vitals';
./SidebarContainer.tsx:6:import ResourcePanel from '../ResourcePanel';
./SidebarContainer.tsx:7:import FeaturesPanel from '../FeaturesPanel';
./SidebarContainer.tsx:8:import ActiveEffectsPanel from '../ActiveEffectsPanel';
./SidebarContainer.tsx:9:import CompanionsPanel from '../tabs/CompanionsTab';
./SidebarContainer.tsx:10:import SidebarSection from './SidebarSection';
./SidebarContainer.tsx:11:import InitiativeTracker from '../InitiativeTracker';
./SidebarContainer.tsx:12:import DmPanel from '../DmPanel';
./SidebarContainer.tsx:13:import ObjectInteractionPanel from '../ObjectInteractionPanel';
./SidebarContainer.tsx:14:import NpcSheetPanel from '../NpcSheetPanel';
./SidebarContainer.tsx:15:import { useVttInteractions } from '../../../hooks/useVttInteractions';
./SidebarContainer.tsx:16:import { useVttController } from '../../../hooks/useVttController';
./SidebarContainer.tsx:17:import { entitySlice } from 'state/entitySlice';
./SidebarContainer.tsx:18:import { useAppDispatch } from 'state/hooks';
./SkillsPanel.tsx:1:import React from 'react';
./SkillsPanel.tsx:2:import { SkillCheckItem } from './types';
./SkillsPanel.tsx:3:import { usePlayerActions } from '../../hooks/usePlayerActions';
./SkillsPanel.tsx:4:import { useAppSelector } from 'state/hooks';
./SkillsPanel.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./SpeciesStep.tsx:1:import React, { useState, useMemo } from 'react';
./SpeciesStep.tsx:2:import { Character, Species, PendingChoice } from './types';
./SpeciesStep.tsx:3:import { generateCustomHeritage } from 'services../ai/character.service';
./SpeciesStep.tsx:4:import InlineProficiencySelector from '../shared/InlineProficiencySelector';
./SpeciesStep.tsx:5:import { useToast } from 'state/ToastContext';
./SpeciesStep.tsx:6:import InlineFeatASISelector from '../shared/InlineFeatASISelector';
./SpeciesStep.tsx:7:import { useAppSelector } from 'state/hooks';
./SpeciesStep.tsx:8:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./SpeciesStep.tsx:9:import { useCharacterActions } from '../../hooks/useCharacterActions';
./SpellsModal.tsx:1:import React from 'react';
./SpellsModal.tsx:2:import { useAppSelector, useAppDispatch } from 'state/hooks';
./SpellsModal.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./SpellsModal.tsx:4:import { SpellsPanel } from '../SpellsPanel';
./SpellsModal.tsx:5:import { useVttInteractions } from '../../../hooks/useVttInteractions';
./SpellsModal.tsx:6:import Modal from '../../shared/Modal';
./SpellsModal.tsx:7:import { animationActions } from 'state/animationSlice';
./SpellsModal.tsx:8:import { VFXRequest } from './types';
./SpellsPanel.tsx:1:import React, { useState, useMemo, useCallback } from 'react';
./SpellsPanel.tsx:2:import { Character, Spell, InnateSpell, VTTTool, SpellTargetingState, SummonChoiceEffect, SummonCreatureEffect, CastSpellEvent, VFXRequest } from './types';
./SpellsPanel.tsx:3:import SpellDetailModal from '../shared/SpellDetailModal';
./SpellsPanel.tsx:4:import CastSpellModal from './CastSpellModal';
./SpellsPanel.tsx:5:import { useToast } from 'state/ToastContext';
./SpellsPanel.tsx:6:import { playStateActions } from './playStateSlice';
./SpellsPanel.tsx:7:import { usePlayerActions } from '../../hooks/usePlayerActions';
./SpellsPanel.tsx:8:import { useAppSelector, useAppDispatch } from 'state/hooks';
./SpellsPanel.tsx:9:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./SpellsPanel.tsx:10:import { uiActions } from 'state/uiSlice';
./SpellsPanel.tsx:11:import { postGameEvent } from 'state/eventSlice';
./SpellsPanel.tsx:12:import { soundManager } from 'services../soundManager';
./SpellsStep.tsx:1:import React from 'react';
./SpellsStep.tsx:2:import { useAppSelector } from 'state/hooks';
./SpellsStep.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./SpellsStep.tsx:4:import KnownSpellsManager from './spells/KnownSpellsManager';
./SpellsStep.tsx:5:import PreparedSpellsManager from './spells/PreparedSpellsManager';
./SpellsStep.tsx:6:import WizardSpellbookManager from './spells/WizardSpellbookManager';
./SummaryStep.tsx:1:import React, { useState, useEffect, useMemo } from 'react';
./SummaryStep.tsx:2:import { Character, Ability, Feat, Trait, ResolvedProficiency } from './types';
./SummaryStep.tsx:3:import { ABILITIES, SKILLS } from '../../constants';
./SummaryStep.tsx:4:import { usePrevious } from '../../hooks/usePrevious';
./SummaryStep.tsx:5:import { useAppSelector } from 'state/hooks';
./SummaryStep.tsx:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./TacticalHUD.tsx:1:import React from 'react';
./TacticalHUD.tsx:2:import { useAppSelector, useAppDispatch } from 'state/hooks';
./TacticalHUD.tsx:3:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./TacticalHUD.tsx:4:import { usePlayerActions } from '../../../hooks/usePlayerActions';
./TacticalHUD.tsx:5:import { uiActions } from 'state/uiSlice';
./TacticalHUD.tsx:6:import ActionIconButton from './ActionIconButton';
./TacticalHUD.tsx:7:import { ActionIcon, BonusActionIcon, ReactionIcon, MoveIcon, SpellIcon, InventoryIcon } from '../../icons/ActionIcons';
./ToolsPanel.tsx:1:import React, { useState, useMemo } from 'react';
./ToolsPanel.tsx:2:import { Character, Ability, ToolCheckItem } from './types';
./ToolsPanel.tsx:3:import { ABILITIES } from '../../constants';
./ToolsPanel.tsx:4:import { useAppSelector } from 'state/hooks';
./ToolsPanel.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./UncannyDodgeModal.tsx:1:import React from 'react';
./UncannyDodgeModal.tsx:2:import { UncannyDodgePrompt, Character } from './types';
./UncannyDodgeModal.tsx:3:import { useToast } from 'state/ToastContext';
./UncannyDodgeModal.tsx:4:import { useAppDispatch, useAppSelector } from 'state/hooks';
./UncannyDodgeModal.tsx:5:import { logEvent } from 'state/logSlice';
./UncannyDodgeModal.tsx:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./UncannyDodgeModal.tsx:7:import { vitalsActions } from './vitalsSlice';
./UncannyDodgeModal.tsx:8:import { playStateActions } from './playStateSlice';
./VTTCanvas.tsx:1:import React, { useRef, useEffect, useState } from 'react';
./VTTCanvas.tsx:2:import { VTTMap, Token, MapNpcInstance } from './types';
./VTTCanvas.tsx:3:import { useVttInteractions } from '../../hooks/useVttInteractions';
./VTTCanvas.tsx:4:import { useAppSelector, useAppDispatch } from 'state/hooks';
./VTTCanvas.tsx:5:import { attackAfterAiMove } from 'state/aiSlice';
./VTTCanvas.tsx:6:import { usePrevious } from '../../hooks/usePrevious';
./VTTCanvas.tsx:7:import { animationActions } from 'state/animationSlice';
./VTTContextMenu.tsx:1:import React from 'react';
./VTTContextMenu.tsx:2:import { useAppSelector } from 'state/hooks';
./VTTContextMenu.tsx:3:import { useVttInteractions } from '../../hooks/useVttInteractions';
./Vitals.tsx:1:import React, { useState } from 'react';
./Vitals.tsx:2:import { Character, HitDicePool } from './types';
./Vitals.tsx:3:import DeathSavesTracker from './DeathSavesTracker';
./Vitals.tsx:4:import { useAppSelector, useAppDispatch } from 'state/hooks';
./Vitals.tsx:5:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./Vitals.tsx:6:import { playStateActions } from './playStateSlice';
./Vitals.tsx:7:import { vitalsActions } from './vitalsSlice';
./Vitals.tsx:8:import { usePlayerActions } from '../../hooks/usePlayerActions';
./WizardSpellbookManager.tsx:1:import React, { useState, useMemo } from 'react';
./WizardSpellbookManager.tsx:2:import { DndClass, Spell } from './types';
./WizardSpellbookManager.tsx:3:import { useToast } from 'state/ToastContext';
./WizardSpellbookManager.tsx:4:import { currencyToCopper, copperToCurrency } from '../../../utils/currency';
./WizardSpellbookManager.tsx:5:import { useAppSelector } from 'state/hooks';
./WizardSpellbookManager.tsx:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./WizardSpellbookManager.tsx:7:import { useCharacterActions } from '../../../hooks/useCharacterActions';
./WizardSpellbookManager.tsx:8:import SpellCard from './SpellCard';
./WizardSpellbookManager.tsx:9:import PreparedSpellsManager from './PreparedSpellsManager';
./useCharacterActions.ts:1:import { useMemo } from 'react';
./useCharacterActions.ts:2:import { useAppDispatch } from './hooks';
./useCharacterActions.ts:3:import { metaActions } from './metaSlice';
./useCharacterActions.ts:4:import { abilitiesActions } from './abilitiesSlice';
./useCharacterActions.ts:5:import { proficienciesActions } from './proficienciesSlice';
./useCharacterActions.ts:6:import { inventoryActions } from './inventorySlice';
./useCharacterActions.ts:7:import { spellsActions } from './spellsSlice';
./useCharacterActions.ts:8:import { Action } from 'engine../characterActions';
./useDialogueManager.ts:1:import React, { useState, useRef, useCallback } from 'react';
./useDialogueManager.ts:3:import { Token, Conversation, DialogueTurn } from './types';
./useDialogueManager.ts:4:import { useAppSelector, useAppDispatch } from './hooks';
./useDialogueManager.ts:5:import { useToast } from 'state/ToastContext';
./useDialogueManager.ts:6:import { startConversation, continueConversation, summarizeConversation } from 'services../ai/dm.service';
./useDialogueManager.ts:7:import { dataService } from 'services./data.service';
./useDialogueManager.ts:8:import { GeminiError } from 'services../geminiService';
./useDialogueManager.ts:9:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./useEncounterGeneration.ts:2:import { useAppSelector, useAppDispatch } from 'state/hooks';
./useEncounterGeneration.ts:3:import { useToast } from 'state/ToastContext';
./useEncounterGeneration.ts:4:import { useVttController } from '../../../hooks/useVttController';
./useEncounterGeneration.ts:5:import { GeminiError } from 'services../geminiService';
./useEncounterGeneration.ts:6:import { generationStart, generationStageUpdate, generationSuccess, generationPartialSuccess, generationFailed } from 'state/worldbuilderSlice';
./useEncounterGeneration.ts:7:import { EncounterConcept } from './types';
./useEncounterGeneration.ts:8:import { generateMapImage } from 'services../ai/world.service';
./usePlayerActions.ts:1:import { useCallback, useState } from 'react';
./usePlayerActions.ts:2:import { useAppSelector, useAppDispatch } from './hooks';
./usePlayerActions.ts:3:import { useToast } from 'state/ToastContext';
./usePlayerActions.ts:4:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./usePlayerActions.ts:5:import { logEvent } from 'state/logSlice';
./usePlayerActions.ts:6:import { playStateActions } from './playStateSlice';
./usePlayerActions.ts:7:import { vitalsActions } from './vitalsSlice';
./usePlayerActions.ts:8:import { ActionItem, Companion, InitiativeEntry, Spell, CompanionBlueprint, SummonChoiceEffect, ClassFeature, Character, Token, DeclareAttackEvent, CastSpellEvent, HealEvent, DodgeActionEvent, MoveTokenEvent, HelpActionEvent, HideActionEvent, SearchActionEvent, DealDamageToObjectEvent, GameEvent, UseFeatureEvent } from './types';
./usePlayerActions.ts:9:import { rollDice, rollD20 } from '../utils/dice';
./usePlayerActions.ts:10:import { setLastRollResult, uiActions } from 'state/uiSlice';
./usePlayerActions.ts:11:import { postGameEvent } from 'state/eventSlice';
./usePlayerActions.ts:12:import { soundManager } from 'services../soundManager';
./useVttController.ts:1:import { useAppSelector, useAppDispatch } from './hooks';
./useVttController.ts:2:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./useVttController.ts:3:import { startCombat, advanceTurn } from 'state/combatFlowSlice';
./useVttController.ts:4:import { generateEncounterConcept } from 'services../ai/map.service';
./useVttController.ts:5:import { EncounterConcept, MapNpcInstance, Token } from './types';
./useVttController.ts:6:import { loadEncounter as loadEncounterAction, loadCrucibleEncounter } from 'state/entitySlice';
./useVttController.ts:7:import { useToast } from 'state/ToastContext';
./useVttController.ts:8:import { GeminiError } from 'services../geminiService';
./useVttInteractions.ts:1:import React, { useState, useCallback, useEffect, useRef } from 'react';
./useVttInteractions.ts:2:import { useAppSelector, useAppDispatch } from './hooks';
./useVttInteractions.ts:3:import { Token, Viewport, Character, VTTTool, SpellTargetingState, MapNpcInstance } from './types';
./useVttInteractions.ts:4:import { clearMonsterSummon } from 'state/appSlice';
./useVttInteractions.ts:5:import { entitySlice, addMonsterToMap } from 'state/entitySlice';
./useVttInteractions.ts:6:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./useVttInteractions.ts:7:import { usePlayerActions } from './usePlayerActions';
./useVttInteractions.ts:8:import { dataService } from 'services./data.service';
./useVttInteractions.ts:9:import { useDialogueManager } from './useDialogueManager';
./PlayView.tsx:1:import React from 'react';
./PlayView.tsx:2:import VTTCanvas from './VTTCanvas';
./PlayView.tsx:3:import SidebarContainer from './SidebarContainer';
./PlayView.tsx:4:import TacticalHUD from './hud/TacticalHUD';
./PlayView.tsx:5:import SceneDisplay from './SceneDisplay';
./PlayView.tsx:6:import ModalContainer from './ModalContainer';
./PlayView.tsx:7:import RollResultToast from '../shared/RollResultToast';
./PlayView.tsx:8:import ActionResultToast from './ActionResultToast';
./PlayView.tsx:9:import { useVttController } from '../../hooks/useVttController';
./PlayView.tsx:10:import { useVttInteractions } from '../../hooks/useVttInteractions';
./PlayView.tsx:11:import { useAppSelector, useAppDispatch } from 'state/hooks';
./PlayView.tsx:12:import { setLastRollResult, setActionResult } from 'state/uiSlice';
./PlayView.tsx:13:import { selectCombatUIData } from 'engine../combatSelectors';
./PlayView.tsx:14:import VTTContextMenu from './VTTContextMenu';
./CrucibleView.tsx:2:import React, { useState, useEffect } from 'react';
./CrucibleView.tsx:3:import { CombatState, VFXRequest } from './types';
./CrucibleView.tsx:4:import LogPanel from './Play/LogPanel';
./CrucibleView.tsx:5:import InitiativeTracker from '../play/InitiativeTracker';
./CrucibleView.tsx:6:import { useVttController } from '../../hooks/useVttController';
./CrucibleView.tsx:7:import { useAppSelector, useAppDispatch } from 'state/hooks';
./CrucibleView.tsx:8:import { initializeApp } from 'state/appSlice';
./CrucibleView.tsx:9:import VTTCanvas from '../play/VTTCanvas';
./CrucibleView.tsx:10:import { useVttInteractions } from '../../hooks/useVttInteractions';
./CrucibleView.tsx:11:import { startCrucibleCombat, pauseCrucible, resumeCrucible, resetCrucible } from 'state/combatFlowSlice';
./WorldbuilderView.tsx:2:import React, { useMemo } from 'react';
./WorldbuilderView.tsx:3:import { useAppSelector, useAppDispatch } from 'state/hooks';
./WorldbuilderView.tsx:4:import { changeAppMode } from 'state/appSlice';
./WorldbuilderView.tsx:5:import { loadEncounter as loadEncounterAction } from 'state/entitySlice';
./WorldbuilderView.tsx:6:import { useEncounterGeneration } from './hooks/useEncounterGeneration';
./WorldbuilderView.tsx:7:import EncounterForm from './components/EncounterForm';
./WorldbuilderView.tsx:8:import ConceptDisplay from './components/ConceptDisplay';
./WorldbuilderView.tsx:9:import GenerationProgress from './components/GenerationProgress';
./BuilderView.tsx:1:import React, { useState } from 'react';
./BuilderView.tsx:2:import { Character } from './types';
./BuilderView.tsx:3:import StepHeader from './StepHeader';
./BuilderView.tsx:4:import CharacterProfile from './CharacterProfile';
./BuilderView.tsx:5:import StepNavigator from './StepNavigator';
./BuilderView.tsx:6:import ClassStep from './ClassStep';
./BuilderView.tsx:7:import BackgroundStep from './BackgroundStep';
./BuilderView.tsx:8:import SpeciesStep from './SpeciesStep';
./BuilderView.tsx:9:import AbilitiesStep from './AbilitiesStep';
./BuilderView.tsx:10:import FeatsStep from './FeatsStep';
./BuilderView.tsx:11:import SummaryStep from './SummaryStep';
./BuilderView.tsx:12:import EquipmentStep from './EquipmentStep';
./BuilderView.tsx:13:import SpellsStep from './SpellsStep';
./BuilderView.tsx:14:import InfusionsStep from './InfusionsStep';
./BuilderView.tsx:15:import { useAppSelector, useAppDispatch } from './hooks';
./BuilderView.tsx:16:import { selectCalculatedActiveCharacterSheet } from 'state/selectors';
./BuilderView.tsx:17:import { setCurrentStep } from 'state/builderSlice';
